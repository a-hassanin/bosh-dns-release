// Code generated by counterfeiter. DO NOT EDIT.
package managerfakes

import (
	"bosh-dns/dns/manager"
	"sync"
)

type FakeAdapterFetcher struct {
	AdaptersStub        func() ([]manager.Adapter, error)
	adaptersMutex       sync.RWMutex
	adaptersArgsForCall []struct {
	}
	adaptersReturns struct {
		result1 []manager.Adapter
		result2 error
	}
	adaptersReturnsOnCall map[int]struct {
		result1 []manager.Adapter
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAdapterFetcher) Adapters() ([]manager.Adapter, error) {
	fake.adaptersMutex.Lock()
	ret, specificReturn := fake.adaptersReturnsOnCall[len(fake.adaptersArgsForCall)]
	fake.adaptersArgsForCall = append(fake.adaptersArgsForCall, struct {
	}{})
	stub := fake.AdaptersStub
	fakeReturns := fake.adaptersReturns
	fake.recordInvocation("Adapters", []interface{}{})
	fake.adaptersMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAdapterFetcher) AdaptersCallCount() int {
	fake.adaptersMutex.RLock()
	defer fake.adaptersMutex.RUnlock()
	return len(fake.adaptersArgsForCall)
}

func (fake *FakeAdapterFetcher) AdaptersCalls(stub func() ([]manager.Adapter, error)) {
	fake.adaptersMutex.Lock()
	defer fake.adaptersMutex.Unlock()
	fake.AdaptersStub = stub
}

func (fake *FakeAdapterFetcher) AdaptersReturns(result1 []manager.Adapter, result2 error) {
	fake.adaptersMutex.Lock()
	defer fake.adaptersMutex.Unlock()
	fake.AdaptersStub = nil
	fake.adaptersReturns = struct {
		result1 []manager.Adapter
		result2 error
	}{result1, result2}
}

func (fake *FakeAdapterFetcher) AdaptersReturnsOnCall(i int, result1 []manager.Adapter, result2 error) {
	fake.adaptersMutex.Lock()
	defer fake.adaptersMutex.Unlock()
	fake.AdaptersStub = nil
	if fake.adaptersReturnsOnCall == nil {
		fake.adaptersReturnsOnCall = make(map[int]struct {
			result1 []manager.Adapter
			result2 error
		})
	}
	fake.adaptersReturnsOnCall[i] = struct {
		result1 []manager.Adapter
		result2 error
	}{result1, result2}
}

func (fake *FakeAdapterFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.adaptersMutex.RLock()
	defer fake.adaptersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAdapterFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ manager.AdapterFetcher = new(FakeAdapterFetcher)
