// Code generated by counterfeiter. DO NOT EDIT.
package handlersfakes

import (
	"bosh-dns/dns/config/handlers"
	"sync"

	"github.com/miekg/dns"
)

type FakeHandlerFactory struct {
	CreateForwardHandlerStub        func([]string, bool) dns.Handler
	createForwardHandlerMutex       sync.RWMutex
	createForwardHandlerArgsForCall []struct {
		arg1 []string
		arg2 bool
	}
	createForwardHandlerReturns struct {
		result1 dns.Handler
	}
	createForwardHandlerReturnsOnCall map[int]struct {
		result1 dns.Handler
	}
	CreateHTTPJSONHandlerStub        func(string, bool) dns.Handler
	createHTTPJSONHandlerMutex       sync.RWMutex
	createHTTPJSONHandlerArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	createHTTPJSONHandlerReturns struct {
		result1 dns.Handler
	}
	createHTTPJSONHandlerReturnsOnCall map[int]struct {
		result1 dns.Handler
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHandlerFactory) CreateForwardHandler(arg1 []string, arg2 bool) dns.Handler {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.createForwardHandlerMutex.Lock()
	ret, specificReturn := fake.createForwardHandlerReturnsOnCall[len(fake.createForwardHandlerArgsForCall)]
	fake.createForwardHandlerArgsForCall = append(fake.createForwardHandlerArgsForCall, struct {
		arg1 []string
		arg2 bool
	}{arg1Copy, arg2})
	stub := fake.CreateForwardHandlerStub
	fakeReturns := fake.createForwardHandlerReturns
	fake.recordInvocation("CreateForwardHandler", []interface{}{arg1Copy, arg2})
	fake.createForwardHandlerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHandlerFactory) CreateForwardHandlerCallCount() int {
	fake.createForwardHandlerMutex.RLock()
	defer fake.createForwardHandlerMutex.RUnlock()
	return len(fake.createForwardHandlerArgsForCall)
}

func (fake *FakeHandlerFactory) CreateForwardHandlerCalls(stub func([]string, bool) dns.Handler) {
	fake.createForwardHandlerMutex.Lock()
	defer fake.createForwardHandlerMutex.Unlock()
	fake.CreateForwardHandlerStub = stub
}

func (fake *FakeHandlerFactory) CreateForwardHandlerArgsForCall(i int) ([]string, bool) {
	fake.createForwardHandlerMutex.RLock()
	defer fake.createForwardHandlerMutex.RUnlock()
	argsForCall := fake.createForwardHandlerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHandlerFactory) CreateForwardHandlerReturns(result1 dns.Handler) {
	fake.createForwardHandlerMutex.Lock()
	defer fake.createForwardHandlerMutex.Unlock()
	fake.CreateForwardHandlerStub = nil
	fake.createForwardHandlerReturns = struct {
		result1 dns.Handler
	}{result1}
}

func (fake *FakeHandlerFactory) CreateForwardHandlerReturnsOnCall(i int, result1 dns.Handler) {
	fake.createForwardHandlerMutex.Lock()
	defer fake.createForwardHandlerMutex.Unlock()
	fake.CreateForwardHandlerStub = nil
	if fake.createForwardHandlerReturnsOnCall == nil {
		fake.createForwardHandlerReturnsOnCall = make(map[int]struct {
			result1 dns.Handler
		})
	}
	fake.createForwardHandlerReturnsOnCall[i] = struct {
		result1 dns.Handler
	}{result1}
}

func (fake *FakeHandlerFactory) CreateHTTPJSONHandler(arg1 string, arg2 bool) dns.Handler {
	fake.createHTTPJSONHandlerMutex.Lock()
	ret, specificReturn := fake.createHTTPJSONHandlerReturnsOnCall[len(fake.createHTTPJSONHandlerArgsForCall)]
	fake.createHTTPJSONHandlerArgsForCall = append(fake.createHTTPJSONHandlerArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	stub := fake.CreateHTTPJSONHandlerStub
	fakeReturns := fake.createHTTPJSONHandlerReturns
	fake.recordInvocation("CreateHTTPJSONHandler", []interface{}{arg1, arg2})
	fake.createHTTPJSONHandlerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHandlerFactory) CreateHTTPJSONHandlerCallCount() int {
	fake.createHTTPJSONHandlerMutex.RLock()
	defer fake.createHTTPJSONHandlerMutex.RUnlock()
	return len(fake.createHTTPJSONHandlerArgsForCall)
}

func (fake *FakeHandlerFactory) CreateHTTPJSONHandlerCalls(stub func(string, bool) dns.Handler) {
	fake.createHTTPJSONHandlerMutex.Lock()
	defer fake.createHTTPJSONHandlerMutex.Unlock()
	fake.CreateHTTPJSONHandlerStub = stub
}

func (fake *FakeHandlerFactory) CreateHTTPJSONHandlerArgsForCall(i int) (string, bool) {
	fake.createHTTPJSONHandlerMutex.RLock()
	defer fake.createHTTPJSONHandlerMutex.RUnlock()
	argsForCall := fake.createHTTPJSONHandlerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeHandlerFactory) CreateHTTPJSONHandlerReturns(result1 dns.Handler) {
	fake.createHTTPJSONHandlerMutex.Lock()
	defer fake.createHTTPJSONHandlerMutex.Unlock()
	fake.CreateHTTPJSONHandlerStub = nil
	fake.createHTTPJSONHandlerReturns = struct {
		result1 dns.Handler
	}{result1}
}

func (fake *FakeHandlerFactory) CreateHTTPJSONHandlerReturnsOnCall(i int, result1 dns.Handler) {
	fake.createHTTPJSONHandlerMutex.Lock()
	defer fake.createHTTPJSONHandlerMutex.Unlock()
	fake.CreateHTTPJSONHandlerStub = nil
	if fake.createHTTPJSONHandlerReturnsOnCall == nil {
		fake.createHTTPJSONHandlerReturnsOnCall = make(map[int]struct {
			result1 dns.Handler
		})
	}
	fake.createHTTPJSONHandlerReturnsOnCall[i] = struct {
		result1 dns.Handler
	}{result1}
}

func (fake *FakeHandlerFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createForwardHandlerMutex.RLock()
	defer fake.createForwardHandlerMutex.RUnlock()
	fake.createHTTPJSONHandlerMutex.RLock()
	defer fake.createHTTPJSONHandlerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHandlerFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.HandlerFactory = new(FakeHandlerFactory)
