// Code generated by counterfeiter. DO NOT EDIT.
package configfakes

import (
	"bosh-dns/dns/config"
	"sync"
)

type FakeStringShuffler struct {
	ShuffleStub        func([]string) []string
	shuffleMutex       sync.RWMutex
	shuffleArgsForCall []struct {
		arg1 []string
	}
	shuffleReturns struct {
		result1 []string
	}
	shuffleReturnsOnCall map[int]struct {
		result1 []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStringShuffler) Shuffle(arg1 []string) []string {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.shuffleMutex.Lock()
	ret, specificReturn := fake.shuffleReturnsOnCall[len(fake.shuffleArgsForCall)]
	fake.shuffleArgsForCall = append(fake.shuffleArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	stub := fake.ShuffleStub
	fakeReturns := fake.shuffleReturns
	fake.recordInvocation("Shuffle", []interface{}{arg1Copy})
	fake.shuffleMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStringShuffler) ShuffleCallCount() int {
	fake.shuffleMutex.RLock()
	defer fake.shuffleMutex.RUnlock()
	return len(fake.shuffleArgsForCall)
}

func (fake *FakeStringShuffler) ShuffleCalls(stub func([]string) []string) {
	fake.shuffleMutex.Lock()
	defer fake.shuffleMutex.Unlock()
	fake.ShuffleStub = stub
}

func (fake *FakeStringShuffler) ShuffleArgsForCall(i int) []string {
	fake.shuffleMutex.RLock()
	defer fake.shuffleMutex.RUnlock()
	argsForCall := fake.shuffleArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStringShuffler) ShuffleReturns(result1 []string) {
	fake.shuffleMutex.Lock()
	defer fake.shuffleMutex.Unlock()
	fake.ShuffleStub = nil
	fake.shuffleReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeStringShuffler) ShuffleReturnsOnCall(i int, result1 []string) {
	fake.shuffleMutex.Lock()
	defer fake.shuffleMutex.Unlock()
	fake.ShuffleStub = nil
	if fake.shuffleReturnsOnCall == nil {
		fake.shuffleReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.shuffleReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeStringShuffler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.shuffleMutex.RLock()
	defer fake.shuffleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStringShuffler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.StringShuffler = new(FakeStringShuffler)
