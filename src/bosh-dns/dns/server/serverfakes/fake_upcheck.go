// Code generated by counterfeiter. DO NOT EDIT.
package serverfakes

import (
	"bosh-dns/dns/server"
	"sync"
)

type FakeUpcheck struct {
	IsUpStub        func() error
	isUpMutex       sync.RWMutex
	isUpArgsForCall []struct {
	}
	isUpReturns struct {
		result1 error
	}
	isUpReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUpcheck) IsUp() error {
	fake.isUpMutex.Lock()
	ret, specificReturn := fake.isUpReturnsOnCall[len(fake.isUpArgsForCall)]
	fake.isUpArgsForCall = append(fake.isUpArgsForCall, struct {
	}{})
	stub := fake.IsUpStub
	fakeReturns := fake.isUpReturns
	fake.recordInvocation("IsUp", []interface{}{})
	fake.isUpMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUpcheck) IsUpCallCount() int {
	fake.isUpMutex.RLock()
	defer fake.isUpMutex.RUnlock()
	return len(fake.isUpArgsForCall)
}

func (fake *FakeUpcheck) IsUpCalls(stub func() error) {
	fake.isUpMutex.Lock()
	defer fake.isUpMutex.Unlock()
	fake.IsUpStub = stub
}

func (fake *FakeUpcheck) IsUpReturns(result1 error) {
	fake.isUpMutex.Lock()
	defer fake.isUpMutex.Unlock()
	fake.IsUpStub = nil
	fake.isUpReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpcheck) IsUpReturnsOnCall(i int, result1 error) {
	fake.isUpMutex.Lock()
	defer fake.isUpMutex.Unlock()
	fake.IsUpStub = nil
	if fake.isUpReturnsOnCall == nil {
		fake.isUpReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.isUpReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpcheck) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isUpMutex.RLock()
	defer fake.isUpMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUpcheck) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.Upcheck = new(FakeUpcheck)
