// Code generated by counterfeiter. DO NOT EDIT.
package recordsfakes

import (
	"bosh-dns/dns/server/record"
	"bosh-dns/dns/server/records"
	"sync"
)

type FakeAliasQueryEncoder struct {
	EncodeAliasesIntoQueriesStub        func([]record.Record, map[string][]records.AliasDefinition) map[string][]string
	encodeAliasesIntoQueriesMutex       sync.RWMutex
	encodeAliasesIntoQueriesArgsForCall []struct {
		arg1 []record.Record
		arg2 map[string][]records.AliasDefinition
	}
	encodeAliasesIntoQueriesReturns struct {
		result1 map[string][]string
	}
	encodeAliasesIntoQueriesReturnsOnCall map[int]struct {
		result1 map[string][]string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAliasQueryEncoder) EncodeAliasesIntoQueries(arg1 []record.Record, arg2 map[string][]records.AliasDefinition) map[string][]string {
	var arg1Copy []record.Record
	if arg1 != nil {
		arg1Copy = make([]record.Record, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.encodeAliasesIntoQueriesMutex.Lock()
	ret, specificReturn := fake.encodeAliasesIntoQueriesReturnsOnCall[len(fake.encodeAliasesIntoQueriesArgsForCall)]
	fake.encodeAliasesIntoQueriesArgsForCall = append(fake.encodeAliasesIntoQueriesArgsForCall, struct {
		arg1 []record.Record
		arg2 map[string][]records.AliasDefinition
	}{arg1Copy, arg2})
	stub := fake.EncodeAliasesIntoQueriesStub
	fakeReturns := fake.encodeAliasesIntoQueriesReturns
	fake.recordInvocation("EncodeAliasesIntoQueries", []interface{}{arg1Copy, arg2})
	fake.encodeAliasesIntoQueriesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAliasQueryEncoder) EncodeAliasesIntoQueriesCallCount() int {
	fake.encodeAliasesIntoQueriesMutex.RLock()
	defer fake.encodeAliasesIntoQueriesMutex.RUnlock()
	return len(fake.encodeAliasesIntoQueriesArgsForCall)
}

func (fake *FakeAliasQueryEncoder) EncodeAliasesIntoQueriesCalls(stub func([]record.Record, map[string][]records.AliasDefinition) map[string][]string) {
	fake.encodeAliasesIntoQueriesMutex.Lock()
	defer fake.encodeAliasesIntoQueriesMutex.Unlock()
	fake.EncodeAliasesIntoQueriesStub = stub
}

func (fake *FakeAliasQueryEncoder) EncodeAliasesIntoQueriesArgsForCall(i int) ([]record.Record, map[string][]records.AliasDefinition) {
	fake.encodeAliasesIntoQueriesMutex.RLock()
	defer fake.encodeAliasesIntoQueriesMutex.RUnlock()
	argsForCall := fake.encodeAliasesIntoQueriesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAliasQueryEncoder) EncodeAliasesIntoQueriesReturns(result1 map[string][]string) {
	fake.encodeAliasesIntoQueriesMutex.Lock()
	defer fake.encodeAliasesIntoQueriesMutex.Unlock()
	fake.EncodeAliasesIntoQueriesStub = nil
	fake.encodeAliasesIntoQueriesReturns = struct {
		result1 map[string][]string
	}{result1}
}

func (fake *FakeAliasQueryEncoder) EncodeAliasesIntoQueriesReturnsOnCall(i int, result1 map[string][]string) {
	fake.encodeAliasesIntoQueriesMutex.Lock()
	defer fake.encodeAliasesIntoQueriesMutex.Unlock()
	fake.EncodeAliasesIntoQueriesStub = nil
	if fake.encodeAliasesIntoQueriesReturnsOnCall == nil {
		fake.encodeAliasesIntoQueriesReturnsOnCall = make(map[int]struct {
			result1 map[string][]string
		})
	}
	fake.encodeAliasesIntoQueriesReturnsOnCall[i] = struct {
		result1 map[string][]string
	}{result1}
}

func (fake *FakeAliasQueryEncoder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.encodeAliasesIntoQueriesMutex.RLock()
	defer fake.encodeAliasesIntoQueriesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAliasQueryEncoder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ records.AliasQueryEncoder = new(FakeAliasQueryEncoder)
