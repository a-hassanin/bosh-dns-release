// Code generated by counterfeiter. DO NOT EDIT.
package recordsfakes

import (
	"bosh-dns/dns/server/record"
	"bosh-dns/dns/server/records"
	"sync"
)

type FakeFiltererFactory struct {
	NewHealthFiltererStub        func(chan record.Host, bool) records.Filterer
	newHealthFiltererMutex       sync.RWMutex
	newHealthFiltererArgsForCall []struct {
		arg1 chan record.Host
		arg2 bool
	}
	newHealthFiltererReturns struct {
		result1 records.Filterer
	}
	newHealthFiltererReturnsOnCall map[int]struct {
		result1 records.Filterer
	}
	NewQueryFiltererStub        func() records.Filterer
	newQueryFiltererMutex       sync.RWMutex
	newQueryFiltererArgsForCall []struct {
	}
	newQueryFiltererReturns struct {
		result1 records.Filterer
	}
	newQueryFiltererReturnsOnCall map[int]struct {
		result1 records.Filterer
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFiltererFactory) NewHealthFilterer(arg1 chan record.Host, arg2 bool) records.Filterer {
	fake.newHealthFiltererMutex.Lock()
	ret, specificReturn := fake.newHealthFiltererReturnsOnCall[len(fake.newHealthFiltererArgsForCall)]
	fake.newHealthFiltererArgsForCall = append(fake.newHealthFiltererArgsForCall, struct {
		arg1 chan record.Host
		arg2 bool
	}{arg1, arg2})
	stub := fake.NewHealthFiltererStub
	fakeReturns := fake.newHealthFiltererReturns
	fake.recordInvocation("NewHealthFilterer", []interface{}{arg1, arg2})
	fake.newHealthFiltererMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFiltererFactory) NewHealthFiltererCallCount() int {
	fake.newHealthFiltererMutex.RLock()
	defer fake.newHealthFiltererMutex.RUnlock()
	return len(fake.newHealthFiltererArgsForCall)
}

func (fake *FakeFiltererFactory) NewHealthFiltererCalls(stub func(chan record.Host, bool) records.Filterer) {
	fake.newHealthFiltererMutex.Lock()
	defer fake.newHealthFiltererMutex.Unlock()
	fake.NewHealthFiltererStub = stub
}

func (fake *FakeFiltererFactory) NewHealthFiltererArgsForCall(i int) (chan record.Host, bool) {
	fake.newHealthFiltererMutex.RLock()
	defer fake.newHealthFiltererMutex.RUnlock()
	argsForCall := fake.newHealthFiltererArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFiltererFactory) NewHealthFiltererReturns(result1 records.Filterer) {
	fake.newHealthFiltererMutex.Lock()
	defer fake.newHealthFiltererMutex.Unlock()
	fake.NewHealthFiltererStub = nil
	fake.newHealthFiltererReturns = struct {
		result1 records.Filterer
	}{result1}
}

func (fake *FakeFiltererFactory) NewHealthFiltererReturnsOnCall(i int, result1 records.Filterer) {
	fake.newHealthFiltererMutex.Lock()
	defer fake.newHealthFiltererMutex.Unlock()
	fake.NewHealthFiltererStub = nil
	if fake.newHealthFiltererReturnsOnCall == nil {
		fake.newHealthFiltererReturnsOnCall = make(map[int]struct {
			result1 records.Filterer
		})
	}
	fake.newHealthFiltererReturnsOnCall[i] = struct {
		result1 records.Filterer
	}{result1}
}

func (fake *FakeFiltererFactory) NewQueryFilterer() records.Filterer {
	fake.newQueryFiltererMutex.Lock()
	ret, specificReturn := fake.newQueryFiltererReturnsOnCall[len(fake.newQueryFiltererArgsForCall)]
	fake.newQueryFiltererArgsForCall = append(fake.newQueryFiltererArgsForCall, struct {
	}{})
	stub := fake.NewQueryFiltererStub
	fakeReturns := fake.newQueryFiltererReturns
	fake.recordInvocation("NewQueryFilterer", []interface{}{})
	fake.newQueryFiltererMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFiltererFactory) NewQueryFiltererCallCount() int {
	fake.newQueryFiltererMutex.RLock()
	defer fake.newQueryFiltererMutex.RUnlock()
	return len(fake.newQueryFiltererArgsForCall)
}

func (fake *FakeFiltererFactory) NewQueryFiltererCalls(stub func() records.Filterer) {
	fake.newQueryFiltererMutex.Lock()
	defer fake.newQueryFiltererMutex.Unlock()
	fake.NewQueryFiltererStub = stub
}

func (fake *FakeFiltererFactory) NewQueryFiltererReturns(result1 records.Filterer) {
	fake.newQueryFiltererMutex.Lock()
	defer fake.newQueryFiltererMutex.Unlock()
	fake.NewQueryFiltererStub = nil
	fake.newQueryFiltererReturns = struct {
		result1 records.Filterer
	}{result1}
}

func (fake *FakeFiltererFactory) NewQueryFiltererReturnsOnCall(i int, result1 records.Filterer) {
	fake.newQueryFiltererMutex.Lock()
	defer fake.newQueryFiltererMutex.Unlock()
	fake.NewQueryFiltererStub = nil
	if fake.newQueryFiltererReturnsOnCall == nil {
		fake.newQueryFiltererReturnsOnCall = make(map[int]struct {
			result1 records.Filterer
		})
	}
	fake.newQueryFiltererReturnsOnCall[i] = struct {
		result1 records.Filterer
	}{result1}
}

func (fake *FakeFiltererFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newHealthFiltererMutex.RLock()
	defer fake.newHealthFiltererMutex.RUnlock()
	fake.newQueryFiltererMutex.RLock()
	defer fake.newQueryFiltererMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFiltererFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ records.FiltererFactory = new(FakeFiltererFactory)
