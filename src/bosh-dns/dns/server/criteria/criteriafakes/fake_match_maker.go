// Code generated by counterfeiter. DO NOT EDIT.
package criteriafakes

import (
	"bosh-dns/dns/server/criteria"
	"sync"
)

type FakeMatchMaker struct {
	MatcherStub        func() criteria.Matcher
	matcherMutex       sync.RWMutex
	matcherArgsForCall []struct {
	}
	matcherReturns struct {
		result1 criteria.Matcher
	}
	matcherReturnsOnCall map[int]struct {
		result1 criteria.Matcher
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMatchMaker) Matcher() criteria.Matcher {
	fake.matcherMutex.Lock()
	ret, specificReturn := fake.matcherReturnsOnCall[len(fake.matcherArgsForCall)]
	fake.matcherArgsForCall = append(fake.matcherArgsForCall, struct {
	}{})
	stub := fake.MatcherStub
	fakeReturns := fake.matcherReturns
	fake.recordInvocation("Matcher", []interface{}{})
	fake.matcherMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMatchMaker) MatcherCallCount() int {
	fake.matcherMutex.RLock()
	defer fake.matcherMutex.RUnlock()
	return len(fake.matcherArgsForCall)
}

func (fake *FakeMatchMaker) MatcherCalls(stub func() criteria.Matcher) {
	fake.matcherMutex.Lock()
	defer fake.matcherMutex.Unlock()
	fake.MatcherStub = stub
}

func (fake *FakeMatchMaker) MatcherReturns(result1 criteria.Matcher) {
	fake.matcherMutex.Lock()
	defer fake.matcherMutex.Unlock()
	fake.MatcherStub = nil
	fake.matcherReturns = struct {
		result1 criteria.Matcher
	}{result1}
}

func (fake *FakeMatchMaker) MatcherReturnsOnCall(i int, result1 criteria.Matcher) {
	fake.matcherMutex.Lock()
	defer fake.matcherMutex.Unlock()
	fake.MatcherStub = nil
	if fake.matcherReturnsOnCall == nil {
		fake.matcherReturnsOnCall = make(map[int]struct {
			result1 criteria.Matcher
		})
	}
	fake.matcherReturnsOnCall[i] = struct {
		result1 criteria.Matcher
	}{result1}
}

func (fake *FakeMatchMaker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.matcherMutex.RLock()
	defer fake.matcherMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMatchMaker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ criteria.MatchMaker = new(FakeMatchMaker)
