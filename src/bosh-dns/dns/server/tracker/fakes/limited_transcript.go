// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type LimitedTranscript struct {
	RegistryStub        func() []string
	registryMutex       sync.RWMutex
	registryArgsForCall []struct {
	}
	registryReturns struct {
		result1 []string
	}
	registryReturnsOnCall map[int]struct {
		result1 []string
	}
	TouchStub        func(string) string
	touchMutex       sync.RWMutex
	touchArgsForCall []struct {
		arg1 string
	}
	touchReturns struct {
		result1 string
	}
	touchReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *LimitedTranscript) Registry() []string {
	fake.registryMutex.Lock()
	ret, specificReturn := fake.registryReturnsOnCall[len(fake.registryArgsForCall)]
	fake.registryArgsForCall = append(fake.registryArgsForCall, struct {
	}{})
	stub := fake.RegistryStub
	fakeReturns := fake.registryReturns
	fake.recordInvocation("Registry", []interface{}{})
	fake.registryMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *LimitedTranscript) RegistryCallCount() int {
	fake.registryMutex.RLock()
	defer fake.registryMutex.RUnlock()
	return len(fake.registryArgsForCall)
}

func (fake *LimitedTranscript) RegistryCalls(stub func() []string) {
	fake.registryMutex.Lock()
	defer fake.registryMutex.Unlock()
	fake.RegistryStub = stub
}

func (fake *LimitedTranscript) RegistryReturns(result1 []string) {
	fake.registryMutex.Lock()
	defer fake.registryMutex.Unlock()
	fake.RegistryStub = nil
	fake.registryReturns = struct {
		result1 []string
	}{result1}
}

func (fake *LimitedTranscript) RegistryReturnsOnCall(i int, result1 []string) {
	fake.registryMutex.Lock()
	defer fake.registryMutex.Unlock()
	fake.RegistryStub = nil
	if fake.registryReturnsOnCall == nil {
		fake.registryReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.registryReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *LimitedTranscript) Touch(arg1 string) string {
	fake.touchMutex.Lock()
	ret, specificReturn := fake.touchReturnsOnCall[len(fake.touchArgsForCall)]
	fake.touchArgsForCall = append(fake.touchArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.TouchStub
	fakeReturns := fake.touchReturns
	fake.recordInvocation("Touch", []interface{}{arg1})
	fake.touchMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *LimitedTranscript) TouchCallCount() int {
	fake.touchMutex.RLock()
	defer fake.touchMutex.RUnlock()
	return len(fake.touchArgsForCall)
}

func (fake *LimitedTranscript) TouchCalls(stub func(string) string) {
	fake.touchMutex.Lock()
	defer fake.touchMutex.Unlock()
	fake.TouchStub = stub
}

func (fake *LimitedTranscript) TouchArgsForCall(i int) string {
	fake.touchMutex.RLock()
	defer fake.touchMutex.RUnlock()
	argsForCall := fake.touchArgsForCall[i]
	return argsForCall.arg1
}

func (fake *LimitedTranscript) TouchReturns(result1 string) {
	fake.touchMutex.Lock()
	defer fake.touchMutex.Unlock()
	fake.TouchStub = nil
	fake.touchReturns = struct {
		result1 string
	}{result1}
}

func (fake *LimitedTranscript) TouchReturnsOnCall(i int, result1 string) {
	fake.touchMutex.Lock()
	defer fake.touchMutex.Unlock()
	fake.TouchStub = nil
	if fake.touchReturnsOnCall == nil {
		fake.touchReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.touchReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *LimitedTranscript) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.registryMutex.RLock()
	defer fake.registryMutex.RUnlock()
	fake.touchMutex.RLock()
	defer fake.touchMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *LimitedTranscript) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
