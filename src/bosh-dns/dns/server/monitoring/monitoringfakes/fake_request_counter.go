// Code generated by counterfeiter. DO NOT EDIT.
package monitoringfakes

import (
	"bosh-dns/dns/server/monitoring"
	"sync"
)

type FakeRequestCounter struct {
	IncrementExternalCounterStub        func()
	incrementExternalCounterMutex       sync.RWMutex
	incrementExternalCounterArgsForCall []struct {
	}
	IncrementInternalCounterStub        func()
	incrementInternalCounterMutex       sync.RWMutex
	incrementInternalCounterArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRequestCounter) IncrementExternalCounter() {
	fake.incrementExternalCounterMutex.Lock()
	fake.incrementExternalCounterArgsForCall = append(fake.incrementExternalCounterArgsForCall, struct {
	}{})
	stub := fake.IncrementExternalCounterStub
	fake.recordInvocation("IncrementExternalCounter", []interface{}{})
	fake.incrementExternalCounterMutex.Unlock()
	if stub != nil {
		fake.IncrementExternalCounterStub()
	}
}

func (fake *FakeRequestCounter) IncrementExternalCounterCallCount() int {
	fake.incrementExternalCounterMutex.RLock()
	defer fake.incrementExternalCounterMutex.RUnlock()
	return len(fake.incrementExternalCounterArgsForCall)
}

func (fake *FakeRequestCounter) IncrementExternalCounterCalls(stub func()) {
	fake.incrementExternalCounterMutex.Lock()
	defer fake.incrementExternalCounterMutex.Unlock()
	fake.IncrementExternalCounterStub = stub
}

func (fake *FakeRequestCounter) IncrementInternalCounter() {
	fake.incrementInternalCounterMutex.Lock()
	fake.incrementInternalCounterArgsForCall = append(fake.incrementInternalCounterArgsForCall, struct {
	}{})
	stub := fake.IncrementInternalCounterStub
	fake.recordInvocation("IncrementInternalCounter", []interface{}{})
	fake.incrementInternalCounterMutex.Unlock()
	if stub != nil {
		fake.IncrementInternalCounterStub()
	}
}

func (fake *FakeRequestCounter) IncrementInternalCounterCallCount() int {
	fake.incrementInternalCounterMutex.RLock()
	defer fake.incrementInternalCounterMutex.RUnlock()
	return len(fake.incrementInternalCounterArgsForCall)
}

func (fake *FakeRequestCounter) IncrementInternalCounterCalls(stub func()) {
	fake.incrementInternalCounterMutex.Lock()
	defer fake.incrementInternalCounterMutex.Unlock()
	fake.IncrementInternalCounterStub = stub
}

func (fake *FakeRequestCounter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.incrementExternalCounterMutex.RLock()
	defer fake.incrementExternalCounterMutex.RUnlock()
	fake.incrementInternalCounterMutex.RLock()
	defer fake.incrementInternalCounterMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRequestCounter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ monitoring.RequestCounter = new(FakeRequestCounter)
