// Code generated by counterfeiter. DO NOT EDIT.
package healthinessfakes

import (
	"bosh-dns/dns/server/healthiness"
	"bosh-dns/healthcheck/api"
	"sync"
)

type FakeHealthWatcher struct {
	HealthStateStub        func(string) api.HealthResult
	healthStateMutex       sync.RWMutex
	healthStateArgsForCall []struct {
		arg1 string
	}
	healthStateReturns struct {
		result1 api.HealthResult
	}
	healthStateReturnsOnCall map[int]struct {
		result1 api.HealthResult
	}
	HealthStateStringStub        func(string) string
	healthStateStringMutex       sync.RWMutex
	healthStateStringArgsForCall []struct {
		arg1 string
	}
	healthStateStringReturns struct {
		result1 string
	}
	healthStateStringReturnsOnCall map[int]struct {
		result1 string
	}
	RunStub        func(<-chan struct{})
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 <-chan struct{}
	}
	RunCheckStub        func(string) api.HealthResult
	runCheckMutex       sync.RWMutex
	runCheckArgsForCall []struct {
		arg1 string
	}
	runCheckReturns struct {
		result1 api.HealthResult
	}
	runCheckReturnsOnCall map[int]struct {
		result1 api.HealthResult
	}
	TrackStub        func(string)
	trackMutex       sync.RWMutex
	trackArgsForCall []struct {
		arg1 string
	}
	UntrackStub        func(string)
	untrackMutex       sync.RWMutex
	untrackArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHealthWatcher) HealthState(arg1 string) api.HealthResult {
	fake.healthStateMutex.Lock()
	ret, specificReturn := fake.healthStateReturnsOnCall[len(fake.healthStateArgsForCall)]
	fake.healthStateArgsForCall = append(fake.healthStateArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.HealthStateStub
	fakeReturns := fake.healthStateReturns
	fake.recordInvocation("HealthState", []interface{}{arg1})
	fake.healthStateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHealthWatcher) HealthStateCallCount() int {
	fake.healthStateMutex.RLock()
	defer fake.healthStateMutex.RUnlock()
	return len(fake.healthStateArgsForCall)
}

func (fake *FakeHealthWatcher) HealthStateCalls(stub func(string) api.HealthResult) {
	fake.healthStateMutex.Lock()
	defer fake.healthStateMutex.Unlock()
	fake.HealthStateStub = stub
}

func (fake *FakeHealthWatcher) HealthStateArgsForCall(i int) string {
	fake.healthStateMutex.RLock()
	defer fake.healthStateMutex.RUnlock()
	argsForCall := fake.healthStateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthWatcher) HealthStateReturns(result1 api.HealthResult) {
	fake.healthStateMutex.Lock()
	defer fake.healthStateMutex.Unlock()
	fake.HealthStateStub = nil
	fake.healthStateReturns = struct {
		result1 api.HealthResult
	}{result1}
}

func (fake *FakeHealthWatcher) HealthStateReturnsOnCall(i int, result1 api.HealthResult) {
	fake.healthStateMutex.Lock()
	defer fake.healthStateMutex.Unlock()
	fake.HealthStateStub = nil
	if fake.healthStateReturnsOnCall == nil {
		fake.healthStateReturnsOnCall = make(map[int]struct {
			result1 api.HealthResult
		})
	}
	fake.healthStateReturnsOnCall[i] = struct {
		result1 api.HealthResult
	}{result1}
}

func (fake *FakeHealthWatcher) HealthStateString(arg1 string) string {
	fake.healthStateStringMutex.Lock()
	ret, specificReturn := fake.healthStateStringReturnsOnCall[len(fake.healthStateStringArgsForCall)]
	fake.healthStateStringArgsForCall = append(fake.healthStateStringArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.HealthStateStringStub
	fakeReturns := fake.healthStateStringReturns
	fake.recordInvocation("HealthStateString", []interface{}{arg1})
	fake.healthStateStringMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHealthWatcher) HealthStateStringCallCount() int {
	fake.healthStateStringMutex.RLock()
	defer fake.healthStateStringMutex.RUnlock()
	return len(fake.healthStateStringArgsForCall)
}

func (fake *FakeHealthWatcher) HealthStateStringCalls(stub func(string) string) {
	fake.healthStateStringMutex.Lock()
	defer fake.healthStateStringMutex.Unlock()
	fake.HealthStateStringStub = stub
}

func (fake *FakeHealthWatcher) HealthStateStringArgsForCall(i int) string {
	fake.healthStateStringMutex.RLock()
	defer fake.healthStateStringMutex.RUnlock()
	argsForCall := fake.healthStateStringArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthWatcher) HealthStateStringReturns(result1 string) {
	fake.healthStateStringMutex.Lock()
	defer fake.healthStateStringMutex.Unlock()
	fake.HealthStateStringStub = nil
	fake.healthStateStringReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeHealthWatcher) HealthStateStringReturnsOnCall(i int, result1 string) {
	fake.healthStateStringMutex.Lock()
	defer fake.healthStateStringMutex.Unlock()
	fake.HealthStateStringStub = nil
	if fake.healthStateStringReturnsOnCall == nil {
		fake.healthStateStringReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.healthStateStringReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeHealthWatcher) Run(arg1 <-chan struct{}) {
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 <-chan struct{}
	}{arg1})
	stub := fake.RunStub
	fake.recordInvocation("Run", []interface{}{arg1})
	fake.runMutex.Unlock()
	if stub != nil {
		fake.RunStub(arg1)
	}
}

func (fake *FakeHealthWatcher) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeHealthWatcher) RunCalls(stub func(<-chan struct{})) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = stub
}

func (fake *FakeHealthWatcher) RunArgsForCall(i int) <-chan struct{} {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	argsForCall := fake.runArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthWatcher) RunCheck(arg1 string) api.HealthResult {
	fake.runCheckMutex.Lock()
	ret, specificReturn := fake.runCheckReturnsOnCall[len(fake.runCheckArgsForCall)]
	fake.runCheckArgsForCall = append(fake.runCheckArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.RunCheckStub
	fakeReturns := fake.runCheckReturns
	fake.recordInvocation("RunCheck", []interface{}{arg1})
	fake.runCheckMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHealthWatcher) RunCheckCallCount() int {
	fake.runCheckMutex.RLock()
	defer fake.runCheckMutex.RUnlock()
	return len(fake.runCheckArgsForCall)
}

func (fake *FakeHealthWatcher) RunCheckCalls(stub func(string) api.HealthResult) {
	fake.runCheckMutex.Lock()
	defer fake.runCheckMutex.Unlock()
	fake.RunCheckStub = stub
}

func (fake *FakeHealthWatcher) RunCheckArgsForCall(i int) string {
	fake.runCheckMutex.RLock()
	defer fake.runCheckMutex.RUnlock()
	argsForCall := fake.runCheckArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthWatcher) RunCheckReturns(result1 api.HealthResult) {
	fake.runCheckMutex.Lock()
	defer fake.runCheckMutex.Unlock()
	fake.RunCheckStub = nil
	fake.runCheckReturns = struct {
		result1 api.HealthResult
	}{result1}
}

func (fake *FakeHealthWatcher) RunCheckReturnsOnCall(i int, result1 api.HealthResult) {
	fake.runCheckMutex.Lock()
	defer fake.runCheckMutex.Unlock()
	fake.RunCheckStub = nil
	if fake.runCheckReturnsOnCall == nil {
		fake.runCheckReturnsOnCall = make(map[int]struct {
			result1 api.HealthResult
		})
	}
	fake.runCheckReturnsOnCall[i] = struct {
		result1 api.HealthResult
	}{result1}
}

func (fake *FakeHealthWatcher) Track(arg1 string) {
	fake.trackMutex.Lock()
	fake.trackArgsForCall = append(fake.trackArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.TrackStub
	fake.recordInvocation("Track", []interface{}{arg1})
	fake.trackMutex.Unlock()
	if stub != nil {
		fake.TrackStub(arg1)
	}
}

func (fake *FakeHealthWatcher) TrackCallCount() int {
	fake.trackMutex.RLock()
	defer fake.trackMutex.RUnlock()
	return len(fake.trackArgsForCall)
}

func (fake *FakeHealthWatcher) TrackCalls(stub func(string)) {
	fake.trackMutex.Lock()
	defer fake.trackMutex.Unlock()
	fake.TrackStub = stub
}

func (fake *FakeHealthWatcher) TrackArgsForCall(i int) string {
	fake.trackMutex.RLock()
	defer fake.trackMutex.RUnlock()
	argsForCall := fake.trackArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthWatcher) Untrack(arg1 string) {
	fake.untrackMutex.Lock()
	fake.untrackArgsForCall = append(fake.untrackArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.UntrackStub
	fake.recordInvocation("Untrack", []interface{}{arg1})
	fake.untrackMutex.Unlock()
	if stub != nil {
		fake.UntrackStub(arg1)
	}
}

func (fake *FakeHealthWatcher) UntrackCallCount() int {
	fake.untrackMutex.RLock()
	defer fake.untrackMutex.RUnlock()
	return len(fake.untrackArgsForCall)
}

func (fake *FakeHealthWatcher) UntrackCalls(stub func(string)) {
	fake.untrackMutex.Lock()
	defer fake.untrackMutex.Unlock()
	fake.UntrackStub = stub
}

func (fake *FakeHealthWatcher) UntrackArgsForCall(i int) string {
	fake.untrackMutex.RLock()
	defer fake.untrackMutex.RUnlock()
	argsForCall := fake.untrackArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHealthWatcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.healthStateMutex.RLock()
	defer fake.healthStateMutex.RUnlock()
	fake.healthStateStringMutex.RLock()
	defer fake.healthStateStringMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.runCheckMutex.RLock()
	defer fake.runCheckMutex.RUnlock()
	fake.trackMutex.RLock()
	defer fake.trackMutex.RUnlock()
	fake.untrackMutex.RLock()
	defer fake.untrackMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHealthWatcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ healthiness.HealthWatcher = new(FakeHealthWatcher)
