#!/bin/bash

set -e -o pipefail

setup_env() {
  mkdir -p "$PWD/envs"
  pushd "$PWD/envs"
    git init
  popd

  echo "### bbl-uping environment ${env_name}"

  local bosh_candidate_release_flag=
  if [[ ! -z "$BOSH_RELEASE_TARBALL_LOCATION" ]]; then
    bosh_candidate_release_flag="--input=bosh-candidate-release=$BOSH_RELEASE_TARBALL_LOCATION"
  fi

  ENV_NAME="${env_name}" \
  BBL_GCP_SERVICE_ACCOUNT_KEY="$( bosh int <(lpass show --notes 'dns-release pipeline vars') --path=/bbl_gcp_service_account_key_id )" \
  fly -t production execute --privileged --include-ignored \
    --config="${task_dir}/bbl-up.yml" \
    --input=bosh-dns-release="${release_dir}" \
    --inputs-from=bosh-dns-release/test-acceptance-windows2019 \
    --input=envs="$PWD/envs" \
    $bosh_candidate_release_flag \
    --output=envs="$PWD/envs"
}

upload_dependencies() {
  echo "### uploading release and stemcells"

  windows_stemcell_job="bosh-dns-release/test-acceptance-windows2019"

  # windows specfic
  ENV_NAME="${env_name}" \
  fly -t production execute --privileged --include-ignored \
    --config="${task_dir}/setup-deploy.yml" \
    --inputs-from="${windows_stemcell_job}" \
    --input=gcp-linux-stemcell="${linux_stemcell_dir}" \
    --input=candidate-release="${tarball_dir}" \
    --input=envs="$PWD/envs"
}

destroy_env() {
  ENV_NAME="${env_name}" \
  BBL_GCP_SERVICE_ACCOUNT_KEY="$( bosh int <(lpass show --notes 'dns-release pipeline vars') --path=/bbl_gcp_service_account_key_id )" \
  fly -t production execute --privileged --include-ignored \
    --config="${task_dir}/bbl-destroy.yml" \
    --input=bosh-dns-release="${release_dir}" \
    --input=envs="$PWD/envs" \
    --output=envs="$PWD/envs"
}

run_tests() {
  echo "### starting windows-specific tests..."
  # windows specfic
  ENV_NAME="${env_name}" WINDOWS_OS_VERSION="${windows_version}" \
  fly -t production execute --privileged \
    --config="${task_dir}/test-acceptance-windows.yml" \
    --inputs-from=bosh-dns-release/test-acceptance-windows2019 \
    --input=bosh-dns-release="${release_dir}" \
    --input=envs="$PWD/envs"

  # nameserver-disabled
  echo "### tests: nameserver-disabled"
  ENV_NAME="${env_name}" WINDOWS_OS_VERSION="${windows_version}" \
  fly -t production execute --privileged \
    --config="${task_dir}/test-acceptance-windows-nameserver-disabled.yml" \
    --inputs-from=bosh-dns-release/test-acceptance-windows2019 \
    --input=bosh-dns-release="${release_dir}" \
    --input=envs="$PWD/envs"

}

main() {
  local destroy=true
  local skip_bbl=false
  local windows_version=windows2019
  local bosh_repo=

  while getopts ":adthw:c:" opt; do
    case ${opt} in
      a )
        echo "Keep-alive option detected (-a)."
        echo "Environment will be left around after run."
        echo "Remember to delete with \`$0 -d\`"
        destroy=false
        ;;
      d )
        echo "Destroy-only option detected (-d)."
        echo "Environment will be destroyed."
        destroy=only
        ;;
      t )
        skip_bbl=true
        ;;
      w )
        windows_version="$OPTARG"
        ;;
      c )
        bosh_repo="$OPTARG"
        ;;
      h )
        echo "Usage: $0 [-h|-a|-w WINDOWS_OS_VERSION|-c BOSH_REPO]"
        echo "     $0 -h                     Display this help message."
        echo "     $0 -a                     Do not destroy environment after running tests."
        echo "     $0 -d                     Destroy-only mode. Will destroy existing environment left around from previous run."
        echo "     $0 -t                     Skip bbl-up. Will only run the tests. WARNING: you need to have setup the environment prior to running this."
        echo "     $0 -w WINDOWS_OS_VERSION  Windows stemcell version to use (windows2019 [default])."
        echo "     $0 -c BOSH_REPO           Location of the BOSH repo."
        exit 0
        ;;
      \? )
        echo "Invalid Option: -$OPTARG" 1>&2
        exit 1
        ;;
    esac
  done

  lpass status

  env_name=$(hostname -s|tr '[:upper:]' '[:lower:]')-local
  mkdir -p "$PWD/envs"

  DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

  task_dir="${DIR}/../ci/tasks/windows"
  release_dir="${DIR}/../"

  tarball_dir=$(mktemp -d)
  bosh create-release --force --tarball="${tarball_dir}/bosh-windows-dns-release.tgz" --dir "${release_dir}"

  linux_stemcell_dir=$(mktemp -d)
  curl -Lo "${linux_stemcell_dir}/stemcell.tgz"  https://bosh.io/d/stemcells/bosh-google-kvm-ubuntu-bionic-go_agent

  if [[ ! -z "$bosh_repo" ]]; then
    export BOSH_RELEASE_TARBALL_LOCATION=$(mktemp -d)
    pushd "$bosh_repo"
      bosh create-release --force --tarball="${BOSH_RELEASE_TARBALL_LOCATION}/bosh-release.tgz"
    popd
  fi

  if [[ "$destroy" = "only" ]]; then
    destroy_env
    exit
  fi

  if [[ "$skip_bbl" = "false" ]]; then
    setup_env
  fi

  upload_dependencies
  run_tests

  if [[ "$destroy" = "true" ]]; then
    destroy_env
  fi
}

main "$@"
